DABR-003-M
http://10.50.20.75:8000/challenges
https://miro.com/app/board/o9J_klSqCSY=/

student4
Command: ssh student@10.50.33.160 -X
Password: password

Tunnel Ports:
10400-10499

###### 'Fun'damentals

## scapy
sudo scapy    # start scapy
a=Ether()   # create ethernet header
a.show()    # shows stuff
a.type=0x0806   # assign ethernet header
b=ARP()   # create arp header
sendp(a/b, iface="eth0")    # send packet across the wire

## Wireshark
tools > firewall rules    # shows how to write firewall rules

## TcpDump
# use sudo
tcpdump -D    # lists all available interfaces
tcpdump -i eth0   # specify interface "eth0"
tcpdump -xx   # more info, hex dump (might be -XX)
tcpdump -w    # write to a file
tcpdump -r <file>   # read a pcap
tcpdump  port <port#>   # specify port number
tcpdump -n    # shows ip and port number instead of host name and ports protocall
# use Berkeley Packet Filters to parse for specific packets
tcp[<byte2check>] & 0x<bits2check> = 0x<bits>   # breakdown of checking bits using BPF
tcp[13] & 0x11 = 0x11   # example of this ^


###### Network Recon

# Passive Recon: Gathering info without direct interaction
whois <ip>    # gives info on website
dig <website>   # gives IPs for a website, end with SOA to get SOA info, end with TXT to get text stuff
nmap <options> <targetIP/Subnet>    # nmap scan
nmap <ip> -Pn -p <port-range>   # scan for open ports, -Pn don't ping host first 
nc <options> <targetIP> <port>  # netcat can be used to bannergrab
sudo arp    # check arp cache
wget <targetIP> -r    # gets public files from host recursively
# use 'show configuration' to get info on routers or 'show int' for more stream line interface view


###### Data transfer

scp <username>@<IP>:/path/to/file .   # copies file at filepath from IP to current dir
scp /path/to/file <username>@<IP>:/to/location   # copy files to IP
scp -3 <fromUser@<fromIP>:/path/to/file <toUser>@<toIP>:/to/location    # transfer files from remote box to remote box

nc -lp <port>   # sets up listening port, add -v for verbose
nc <IP> <port>    # connects to listening port at IP, can be used to banner grab

nc -lvp <port> < <file>   # set up listening port to send a file from
nc -v -w1 <IP> <port> > <newfilename>   # get file from IP, arrows can be reversed to send the other way

mknod mypipe p    # creates pipe file called "mypipe"
nc <listener1IP> <port1> 0< mypipe | nc <listener2IP> <port2> 1> mypipe   # creates client relay
nc -l -p <port1> < <infile>    # done on listener1, sends info
nc -l -p <port2> > <outfile>   # done on listener2, receives info


###### Tunneling

## ssh local port forwarding
ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT

## local port forwarding throug a local port
ssh student@<IP1> -L <port1>:<IP2>:22 -NT   # sets up port on your host , range, or any.
165
# Source Port - one, multiple, any, or range of ports. Direction - either inbound or in and outbouto send stuff to IP2 through IP1
ssh student@localhost -p <port1> -L <port2>:<IP3>:80 -NT    # connects to local port to connect through tunnel and sets up another tunnel on IP2 to IP3
firefox localhost:<port2>   # connects through tunnels

## Dynamic port forwarding, allows for the use of scripts and other programs
ssh <user>@<pivot ip> -D 9050 -p <alt port> -NT   # use @localhost when going through tunnels

proxychains ./scan.sh   # use "proxychains" to run tools through dynamic tunnel
proxychains ssh student@<IP>

## remote port forwarding
ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:localhost:<tgt port> -NT   # remote IP & port is on your box


###### Net Recon

# Host Discovery (scan script, nmap, nc, ping sweep), (ip neighbor | grep -v FAILED)
# Port Discovery (scan script, nmap, nc)
# Port Validation (bannergrabing - nc)
# Follow up (based on port found)
  # 22 or 23: connect to it and do passive recon
  # 21 or 80: wget -r <ip> or wget -r ftp://<ip>
  
## pasive recon
# hostname (hostname)
# other listening ports (ss -nltp)
# other interfaces/subnet (ipconfig -or- ip a)
# files of interest (find / -name hint* 2> /dev/null -or- find / -name flag* 2> /dev/null) (open images: eom)
# check for tools (the whole thing is the command): which nmap nc tcpdump wireshark wget telnet
# ping sweep: for i in {1..254}; do (ping -c 1 <first.three.oct>.$i | grep "bytes from" &) 2> /dev/null ;done


###### Network traffic filtering

# Network address and port translation (NAT and PAT respectively)

## iptables
sudo iptables -L    # shows rules (use sudo with all of these)
iptables -t [table] -L    # look a specific table
iptables -t [table] -A [chain] -m [rules] -j [action]    # the -m is optional, it means match, [chain] = INPUT, FORWARD, OUTPUT. 
# [rules] = state --state [state], mac [--mac-source | --mac-destination] [mac], tcp | udp [--dport | --sport] [port | port1:port2]
# multiport = [--sports | --dports | --ports] [port1,[port2,[port3:port15]]]
# [action] = ACCEPT, REJECT, DROP

iptables -t [table] -F    # Flush table
iptables -t [table] -P [chain] [action]   # Change default policy
iptables -t [table] -L --line-numbers   # Lists rules with rule numbers
iptables -t [table] -S    # Lists rules as commands interpreted by the system
iptables -t [table] -I [chain] [rule num] [rules] -j [action]   # Inserts rule before Rule number
iptables -t [table] -D [chain] [rule num]   # Deletes rule at number

iptables-save > myfirewall.conf   # save
iptables-restore < myfirewall.conf    # and load firewall config

## nftables
nft list tables   # shows tables
nft list table [table]    # show specific table, can also "delete" or "flush" table

nft add table [family] [table]    # add table
# [family] = ip, ip6, inet, arp, bridge and netdev. [table] = user provided name for the table.
nft add chain [family] [table] [chain] { type [type] hook [hook] priority [priority] \; policy [policy] \;}
# [chain] = User defined name for the chain. [type] =  can be filter, route or nat. [hook] = prerouting, ingress, input, forward, output or postrouting.
# [priority] = user provided integer. Lower number = higher priority. default = 0. Use "--" before negative numbers.
# ; [policy] ; = set policy for the chain. Can be accept (default) or drop. Use "\" to escape the ";" in bash
nft add rule [family] [table] [chain] [matches (matches)] [statement]
# [matches] = typically protocol headers(i.e. ip, ip6, tcp, udp, icmp, ether, etc) (matches) = these are specific to the [matches] field.
# [statement] = action performed when packet is matched. Some examples are: log, accept, drop, reject, counter, nat (dnat, snat, masquerade)

nft add rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]    # Adds after position
nft insert rule [family] [table] [chain] [position <position>] [matches (matches)] [statement]    # Inserts before position
nft replace rule [family] [table] [chain] [handle <handle>] [matches (matches)] [statement]    # Replaces rule at handle
nft delete rule [family] [table] [chain] [handle <handle>]    # Deletes rule at handle

nft list rulesets -a    # shows handles and stuf

## NAT & PAT
nft add table ip NAT    # create NAT table
nft add chain ip NAT PREROUTING {type nat hook prerouting priority 0 \; }   # Create the NAT chains
nft add chain ip NAT POSTROUTING {type nat hook postrouting priority 100 \; }


nft add rule ip NAT POSTROUTING ip saddr 10.1.0.2 oif eth0 snat 144.15.60.11    # Source NAT
nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3   # Destination NAT
nft add rule ip NAT POSTROUTING ip saddr 10.1.0.0/24 oif eth0 masquerade    # Source NAT w/ masquerade
nft add rule ip NAT PREROUTING tcp dport 80 redirect to 8080    # Destination NAT (port forwarding) with redirect

## Snort ruels
[action] [protocol] [s.ip] [s.port] [direction] [d.ip] [d.port] ( match conditions ;)   # Action - such as alert, log, pass, drop, reject.
# Protocol - includes TCP, UDP, ICMP and others. Source IP address - single address, CIDR notation, range, or any.
# Source Port - one, multiple, any, or range of ports. Direction - either inbound or in and outbound.
# Destination IP address - options mirror Source IP. Destination port - options mirror Source port.

# Examples:
alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; sid:2121; )   # Look for anonymous ftp traffic
alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; offset:5; sid:2121; )   # Will start looking at byte 6 in the payload
alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; depth:14; sid:2121; )   # Search first 14 bytes for the word “anonymous”.
alert tcp any any -> any 21 (msg:"Anonymous FTP Login"; content: "anonymous"; nocase; sid:2121; )   # Deactivates the case sensitivity of a text search.

sudo snort -D -l /var/log/snort/ -c /etc/snort/snort.conf   # starts snort
sudo snort -r <snort file>  # checks rules against a snort file



  ,,__
 o"   )~
  '''' 




'ip[1] & 252 = 26 && ip[16:4] = 0A000067'




