https://os.cybbh.io/public/os/latest/index.html

http://10.50.22.25:8000/
DABR-M-22003
Winter@COSC!

xfreerdp /u:student /v:10.50.25.36 /dynamic-resolution +glyph-cache +clipboard

###### Command stuff

get-process | get-member | where-object {$_.membertype -match "Method"}
(get-process notepad*).kill()

CIM/CIM  Get-CIMEnstance  # Can tab through classnames
WMI/DCOM  Get-WMIObject  # Can't tab through classnames

get-wmiobject -list | Where-Object {#_.Name -like "win32*"}

<command> -ErrorAction SilentlyContinue  # removes error msg's
<command> -Verbose  # gives feedback on normaly silent commands

$PSVersionTable  # gives version info, Build Version indicates what you can run

# PS checks PS profiles for config in this order:
Current User, Current Host > Current User, All Hosts > All Users, Current Host > All Users, All Hosts 
# ISE is the same but only checks on Current Host
$profile | get-member -Type NoteProperty  # gets this ^ stuff
# can be used to establish persistance 

test-path -path $profile.CurrentUserCurrentHost   # checks if path exists
new-item -ItemType file -path $profile -Force  # add profile
ISE $profile    # add stuff to that profile

[<namespace>]::<Function>(<Object>)   # how to use .NET API calls in powershell

Remote Desktop Connection   3389    # me

Get-ChildItem | select name,*target


###### Win Reg

# database that contains system wide settings, it's like its own file system
# use registry editor to edit
# HKEY's are directories of keys split on stuff
# HKEY_USERS contains keys on all users that have loged on to system, SID: 18=default?, 21=Domain, 500=Admin, 
# HKEY_LOCAL_MACHINE contains what OS to load (under BCD00000), drivers (HARDWARE), user credz (SAM), LSAS and permisons (SECURITY), system wide programs (SOFTWARE), aand system settings (SYSTEM) like what starts on boot
# HKEY_CLASSES_ROOT a symbolic lint to that users classes, contains file extension information

# ignore SecurityHealth & OneDrive

reg ?   # gives options for reg command, used to fuck around with registry
reg query add hkcu\software\microsoft\windows\currehttps://os.cybbh.io/public/os/latest/index.htmlntversion\run /v <name> /t <type> /d <file path>  # example of how to make new Reg key with reg

Get-Item ; Get-ChildItem ; Get-ItemProperty   # used to query reg in PS, the better way to do stuff
Get-Item -path "<path>"   # fuck these instructorsf
gci registry::<key path>    # shows whats inside reg, can use wiled cards like *
New-PSDrive -Name HKU - PSProvider Registry -Root HKEY_USERS    # makes a PSDrive on users
Add-Content -Path $profile.AllUsersAllHosts -value '<all this ^ stuff>'   # makes system do this ^ on start up

wmic useraccount  # shows SID

New-Item <key path> -Name '<name>'    # adding reg items in PS
New-ItemProperty <key path> -Name '<prop name>' -PropertyType string    # and changing its properties


###### Alt Data Streams

# everything in windows uses normal data stream

echo "some text" > somefile.txt   # creates normal text file
"some secret text" > somefile.txt:altfile.txt   # creates alt text file (in command prompt)
dir /R    # shows alt data streams

Set-Content -Value "more secret text" -Path .\somefile.txt -stream PSaltfile    # doing it in PS
Get-Content -Path .\somefile.txt -Stream PSaltfile    # getting it in PS
Get-Item <item to query> -Stream *

Get-ChildItem -recurse | foreach {Get-Item $_.fullname -stream * -erroraction SilentlyContinue } | where stream -ne ':$data'  # searches for alt data streams  : seriously fuck these dumb ass mother fucking instructors who dont teach us shit


###### Linux file system

xxd   # gives hex output of a file
dd    # used to copy a file byte by byte
openssl   # used to encrypt & decrypt files using specified encryption


###### Win Boot Process

BIOS > MBR/Volume boot sector > bootmgr(or NTLDR) > BCD > Winload.exe/Winresume.exe > NTOSKRNL > System
UEFI > EFI Partition > bootmgrfw.efi > BCD > Winload.efi/Winresume.efi > NTOSKRNL > System

                       / CSRSS.exe   / LSASS.exe
           / Session 0 - WININIT.exe - SVCHOST.exe
SMSS.exe <
           \ Session 1 - WINLOGON.exe - USERINIT.exe > Explorer.exe
                       \ CSRSS.exe    \ LOGONUI.exe

Sadness: https://git.cybbh.space/os/public/raw/master/images/winboot-06.jpg

## BIOS or UEFI?
Type C:\Windows\Panther\Setupact.log | findstr /i "Detected boot environment"   # or...
Get-Content C:\Windows\Panther\Setupact.log | Select-String "Detected boot environment"

bcdedit | findstr /i path   # .exe = BIOS, .efi = UFEI

## Edit boot loader stuff
bcdedit   # show Boot Manager
bcdedit /set `{current`} description "Beyond Hell, Above Heaven"    # change discription
bcdedit /set /deletevalue /displayorder /crate /export /import /delete /force

Msinfo32.exe


###### Linux Boot

BIOS = Basic in/out system, ececutes MBR
MBR = Master boot record, eceutes GRUB
GRUB = bootloader, eceutes Kernel
Kernel = executes /bin/init
Init = executes runlevel programs
Runlevel = programs are ececuted from /etc/rc.d/rc*.d/

lsblk -f    # shows drives or some shit

sudo xxd -l 512 -g 1 /dev/sda   # get MBR hex stuff

sudo dd if=<file2copy> [of=<outFile>] bs=1 count=512   # copy part of a file, bs is block size and count is 512 to get just boot stuff of MBR

less /boot/grub/grub.cfg   # shows grub config
linux /boot/vmlinuz-otherstuff:P  # the line that starts the kernel looks like this, put single after the "ro" to get root access

lsmod   # lists modules

# kernel is process 0 [kthreadd]
# init process is PID 1

## SYSV
cat /etc/inittab    # shows system environment config
# run levels: 0=halt, 1=single-user,no-network, 2=multi-user,no-network, 3=multi-user,network, 4=user-defined, 5=X11,multi-user,networking, 6=reboot
# service info: Script Location: /etc/rc<#>.d/   Called From: /etc/init.d/    (should only have init.d stuff)

## SYSTEMD
ls -l /lib/systemd/system/default.target    # shows system run level
run levels: 0=poweroff.target, 1=resue.target, 2-4=multi-user.target, 5=graphical.target, 6=reboot.target
# Config Location: /etc/systemd/system/   Linked To: /lib/systemd/system/
sudo systemctl list-dependencies graphical.target   # List unit dependencies in a tree form
# services under a target are its wants, the last one is a need and the next target
sudo systemctl show -p Wants graphical.target    # shows wants
systemctl list-unit-files   # shows some other stuff, something about service timmers
# systemctl command does alot of stuff: https://os.cybbh.io/public/os/latest/007_linux_boot_process/linboot_fg.html#_6_2_4_systemd_putting_it_all_together

## Loaded at boot/login
#/etc/environment   read once when the machine completes Init, PATH variable is the search path for executables from the command line
#/etc/profile   executes whenever a user logs into an interactive shell, system-wide
#/etc/bash.bashrc   interactive nonlogin shells, system-wide
#~/.profle | ~/.bash_profile    similar to /etc/profile but for a given user
#~/.bashrc    similar to /etc/bash.bashrc but for a given user


###### Some tunnel stuff :P

ssh <user>@<IP of Admin> -L <RHP1>:<IP of Terra>:22 -L <RHP2>:<IP of M-Terra>:22
                                      
ssh <Terra user>@localhost -p <RHP1>
ssh <M-Terra user>@localhost -p <RHP2>


###### Win Process

# services are processes that run in the background and don't require user interaction
# " get-process "or use " Get-WmiObject Win32_Process | select * "   good tags are: commandline, handles (modules for process)
# can use " | where ProcessID -like "<pid> | select <whatever> " to pull specific processes
# use " | ft <tags selected> -AutoSize | out-flile -width 4096 <filepath> " to see all

tasklist /m /fi "IMAGENAME eq powershell_ise.exe"   # shows all handles for powershell ise

#services should come from (Path) C:\windows\system32\svchost.exe and commandline should match
sercvices.msc   # gui service list
sc.exe    # non gui service list, can be used with " showsid <serviceName> " to show sid for specific service (even if it does not exist)
Get-WmiObject Win32_service | select *    # shows service stuff, 

schtasks /query /tn "<taskFullPath>" /v /fo list  # shows information on a specific scheduled task
Get-ScheduledTask | where taskname -like "<taskName>" | select *    # more info on a scheduled task
# or just use gui: task scheduler, click TS library and click task

## 























