file manipulation
cut, awk, sort
special parm
vars and sed
loops
if thens







https://git.cybbh.space/programming/bash/public/

--PRO BASH USEAGE--
/  (search in man pages or when useing less)
<tab><tab>  (shows all options available)
<ctrl><shift><c/v>  (for copy/paste in terminal)
!<history line number>  (rerun commands from history)
<ctrl>r <provide pattern> <ctrl>r   (reverse-i-search, search for command in history(?) ctrl r again to cyle through)
# comments :) can be referenced with ctrl r
# explainshell.com is a good resorce for looking shit up
!! #run last command

man -k <keyword> | grep <more keywords>  # searches for commands


--FILE MANIPULATION COMMANDS--
cd - #go to last dir
.  #ref current dir
touch #create files
mkdir -p #create dir in dirs
curl cht.sh/<command>  #finds examples of command online
cp #copy files
mv #move files
> #replace  >> #append
cat -n # -n for line numbers
ln -s <source> <link> #creates a symbolic link

locate #searches based off database
which <command> whereis <command> whatis <command> # shows location/location + man page location/discription of command
2>/dev/null  #dump errors in da trash

--DATA OUTPUT--
head/tail -n<num>
cut -d<delimiter> -f<row numbers to include>  #a way to cut out rows of output, -c<num> cuts out number of spaces
awk '{print $<row number>}' # cuts rows based on spaces, can handle multiple spaces unlike cut
awk -F<delimiter> '{print $<row number>}' # awk using -F for delimiters, cuts out delimiter
awk '{print "ur mom lel="$5, "ur dad="$1}'  # example of how you can print text and rows freely with awk
awk -F: '/root|student/ {print $0}' /etc/passwd # just pulls lines that starts with root or student
awk -F: '($7=="/bin/bash") BEGIN {print $0-}' /etc/passwd  # prints every line that has "/bin/bash" in row 7
awk '{print $NF}' # prints last feild 
awk -F: 'BEGIN {OFS="#"}' # replaces ":" with "#"
sort  # pipe into sort to sort data by ASCII value
sort -nr  # -n sorts numbers -r sorts backwards
sort -t: -k2,3  # splits data into rows on ":" and then sorts on rows 2 and then 3
uniq -c  # removes adjacent duplicates -c gives line numbers
NF # number of feilds, FS # field seperator, OFS # output field seperator 
awk number record # look up, for pulling specific line


--SPECIAL PARAMETERS--
$#  num of arguments passed to shell
$0  the script namecompare
111
  
$i  'i'th argument passed to the shell
$*  gives all arguments passed to the shell
$!  gives PID of last background running process
$?  exit status of last command   0 == success $(find /bin -type f -executable | sort )
$_  gives last argument provided to previous command
$$  gives PID of current shell
$@  holds arguments passed to the scipt and treat them as an array
$-  represents the current flag set in your shell (.himBH are the flags in bash) 


--ORGANAZATIONAL OPORATORS--
alias # just don't forget this exists
function <funName>()  { <code> }   #how to write a function in bash
<VARIABLENAME>=$(<command>) # making variables in bash, $(<command>) can also be used to access a command in the middle of a string
<variableName>=<string or int>  # variable for string or int
${<varName>}<string>  # how to ref a var in a string
# ":" can be used instead of "/"
sed 's/<pattern>/<replace_with>/g' <file> # "s" denotes replace, "g" means all instances, prints <file> with <pattern> replaced by <replace_with> 
sed -i # replaces original file
sed 's/<pat>/<replace>/g';s/<pat2>/<replace2>/g' <file> # replace multiple different things in a file
sed '2d' <file>  #deletes second line
sed -n '10p' # pulls the 10th line


--COMARITORARATORS--
== & != for comparing strings
-eq & -ne for comparing integers


--SCRIPTING--
vim <name>.sh && chmod +x <name>.sh
  #!/bin/bash

--LOOOOPS--
# iderates list of items
for NAME in Marky Ricky Danny Terry Mickey Ari Jordi  # <-var can also be used here
do
echo $NAME  # <-code goes here
done

for value in {1..5}  # prints numbers 1-5, {5..1} can be used to print backwards
do
echo $value
done

for ((x=0;x<=5;x++))  # you know what this is -_^
do
echo"x is: $x"  # (( x++ )) can also be used to increment the var
break  # can be used to escape the loop
continue  # breaks to the next iteration of the loop
done

touch file{1..5}.txt  # creates file1.txt to file5.txt for setup
for i in $(ls *.txt)  # iderates through the files
do
echo "$i"
done

for word in $(cat <file>)  # iterate through words in a file, put "quotes" around "$(cat file)" and "$word" to print by line
do 
  echo $word
done


counter=1
while [[ $counter -le 10 ]]
do
  echo $counter
  ((counter++))
done

counter=1
until [[ $counter -gt 10 ]]
do
  echo $counter
  ((counter++))
done

while read line  # pars a file
do
  echo $line
done < myfile.del

--ifs--
if [[ $(cat $filename) -lt 10 ]]   #if var $filename contains a number less than 10, SPACES FUCKING MATTER
  then
    echo "single digit"
  elif [[ $(cat $filename) -ge 10 ]] && [[ $(cat $filename) -lt 100 ]]
  then
    echo "double digit"
  elif [[ $(cat $filename) -ge 100 ]] && [[ $(cat $filename) -lt 1000 ]]
  then
    echo "triple digit"
  else
    echo "Error"
fi



--ACTIVITIES--
A1 Brace Expansion:
  mkdir /var/log/{auth,syslog,dmesg}_log  # is the same as... 
  mkdir /var/log/auth_log /var/log/syslog_log /var/log/dmesg_log  # also {1..5} is 1 through 5
A2 Find & Copy:
  $HOME/1123/[^~].txt # [^] is a not character in RegX
  cp $HOME/1123/*[^~].txt CUT # used to copy all text files that dont end with ~ to CUT
A3 More Find:
  find /lib -empty -print '%i %f\n'
A4 Find & Print:
  find / -type f -inum 999 -printf '%i %f\n' 2>/dev/null
A5 CUT Delimitation:
  ls -l | cut -d: -f2 | cut -d' ' -f2 | cut -d. -f1- -s > names # filtering with cut, -s removes lines that don't have delimiter
A6 Regex:
  egrep -o "([0-9]{1,3}\.){3}[0-9]{1,3}" Story_HiddenIPs | sort | uniq -c | sort -nr
A7 Awk Stuff:
  awk -F: '($3>3 && $NF=="/bin/bash")' /etc/passwd
A8 Awk My Ass Off:
  dmesg | awk '/BIOS|CPU/ {print $0}' | egrep -iv "usable|reserved" | cut -d] -f2-
A9 String Subbing:
  awk -F: 'OFS=":"}{print $1,$2}' shadow.txt
A10 String Sub:
  sed "/\/bin\/false/d:/\/bin\/sh/d" /etc/passed > passwd.txt
A11 find .bin files:
  find / -type f -iname "*.bin" 2> /dev/null | awk -F/ '{OFS="/"}{$NF="";print $0}' | sort -u
